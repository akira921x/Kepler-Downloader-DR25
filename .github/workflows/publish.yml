name: Publish to PyPI

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to TestPyPI first'
        required: false
        default: true
        type: boolean
      use_api_token:
        description: 'Use API token instead of Trusted Publisher (fallback)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  build:
    name: Build distribution packages
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build wheel setuptools
    
    - name: Verify version consistency
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        PACKAGE_VERSION=$(python -c "exec(open('kepler_downloader_dr25/_version.py').read()); print(__version__)")
        
        if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
          echo "Error: Tag version ($TAG_VERSION) does not match package version ($PACKAGE_VERSION)"
          exit 1
        fi
        echo "Version check passed: v$PACKAGE_VERSION"
    
    - name: Build distribution
      run: python -m build
    
    - name: Check distribution
      run: |
        python -m pip install twine
        twine check dist/*
    
    - name: Display distribution contents
      run: ls -la dist/
    
    - name: Upload distribution artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  test-pypi:
    name: Publish to TestPyPI
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_pypi == 'true'
    needs: build
    runs-on: ubuntu-latest
    
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/kepler-downloader-dr25
    
    permissions:
      id-token: write  # Required for Trusted Publishing
    
    steps:
    - name: Download distribution artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        verbose: true
        print-hash: true

  publish-pypi:
    name: Publish to PyPI with Attestations
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    
    environment:
      name: production
      url: https://pypi.org/p/kepler-downloader-dr25
    
    permissions:
      id-token: write  # Required for Trusted Publishing
      contents: write  # Required for attestations
      attestations: write  # Required for attestations
    
    steps:
    - name: Download distribution artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: List distributions to publish
      run: ls -la dist/
    
    - name: Generate artifact attestations
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: 'dist/*'
    
    - name: Publish to PyPI with attestations (Trusted Publisher)
      if: github.event.inputs.use_api_token != 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
        print-hash: true
        attestations: true  # Enable PEP 740 attestations
    
    - name: Publish to PyPI with API token (Fallback)
      if: github.event.inputs.use_api_token == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
        print-hash: true
        attestations: false  # Attestations not available with API token

  verify-installation:
    name: Verify Package Installation
    needs: publish-pypi
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.11']
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Wait for PyPI to update
      run: sleep 60
    
    - name: Install published package
      run: |
        python -m pip install --upgrade pip
        pip install kepler-downloader-dr25 --no-cache-dir
    
    - name: Verify installation
      run: |
        python -c "import kepler_downloader_dr25; print(f'Version: {kepler_downloader_dr25.__version__}')"
        kepler-download --help
        kepler-filter --help
    
    - name: Run basic smoke test
      run: |
        echo "KIC" > test_input.csv
        echo "1234567" >> test_input.csv
        kepler-download test_input.csv --help || true

  create-github-release:
    name: Create GitHub Release Assets
    if: startsWith(github.ref, 'refs/tags/v')
    needs: publish-pypi
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download distribution artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Calculate checksums
      run: |
        cd dist
        sha256sum * > SHA256SUMS.txt
        cat SHA256SUMS.txt
    
    - name: Upload release assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ github.ref_name }} dist/* --clobber